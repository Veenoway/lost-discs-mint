{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/veeno/Documents/WORK/Monshape/lost-discs/src/components/button.tsx"],"sourcesContent":["import { cn } from \"@/utils/cn\";\n\ntype ButtonProps = React.ButtonHTMLAttributes<HTMLButtonElement> & {\n  children: React.ReactNode;\n  className?: string;\n};\n\nexport const Button = ({ children, className, ...props }: ButtonProps) => {\n  return (\n    <button\n      className={cn(\n        \"bg-[#858585] w-full justify-center mx-auto bg-[#ffffff13] border border-[rgba(255,255,255,0.37)] flex items-center rounded-lg h-[45px] sm:h-[53px] text-lg sm:text-2xl uppercase text-white transition-all duration-300 ease-in-out\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </button>\n  );\n};\n"],"names":[],"mappings":";;;;AAAA;;;AAOO,MAAM,SAAS,CAAC,EAAE,QAAQ,EAAE,SAAS,EAAE,GAAG,OAAoB;IACnE,qBACE,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,uOACA;QAED,GAAG,KAAK;kBAER;;;;;;AAGP"}},
    {"offset": {"line": 25, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 31, "column": 0}, "map": {"version":3,"sources":["file:///Users/veeno/Documents/WORK/Monshape/lost-discs/src/contract/index.ts"],"sourcesContent":["export const NFT_ADDRESS =\n  \"0x3Cd761CBa7595E6d94F77c36D7b65685FC62a0Db\" as const;\n// 0x5c7103fDD66802BB39EaB62Ab7465C361f16855b PREVIOUS WITH 5MON GTD PRICE\n\nexport const NFT_ABI = [\n  {\n    inputs: [],\n    name: \"MAX_SUPPLY\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"PRICE\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"totalMinted\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"remainingSupply\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"paused\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_user\",\n        type: \"address\",\n      },\n    ],\n    name: \"getUserMintStatus\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"canCurrentlyMint\",\n        type: \"bool\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"mintsDone\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"mintsAllowed\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"mintsRemaining\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"string\",\n        name: \"userStatus\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getMintPhaseInfo\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"currentPhase\",\n        type: \"string\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"isActive\",\n        type: \"bool\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"totalSupply\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"mintedCount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"remainingCount\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_user\",\n        type: \"address\",\n      },\n    ],\n    name: \"getUserNFTsDetailed\",\n    outputs: [\n      {\n        internalType: \"uint256[]\",\n        name: \"userTokens\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"metadata\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"string[]\",\n        name: \"tokenURIs\",\n        type: \"string[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"totalOwned\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"tokenURI\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bool\",\n        name: \"isOG\",\n        type: \"bool\",\n      },\n    ],\n    name: \"mint\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"metadata\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Minted\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_user\",\n        type: \"address\",\n      },\n    ],\n    name: \"isWhitelisted\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_user\",\n        type: \"address\",\n      },\n    ],\n    name: \"isOG\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_user\",\n        type: \"address\",\n      },\n    ],\n    name: \"isFCFS\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_user\",\n        type: \"address\",\n      },\n    ],\n    name: \"isTeamMember\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_user\",\n        type: \"address\",\n      },\n    ],\n    name: \"canMintPublic\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n"],"names":[],"mappings":";;;;AAAO,MAAM,cACX;AAGK,MAAM,UAAU;IACrB;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACR;SACD;QACD,iBAAiB;QACjB,MAAM;IACR;IACA;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACR;SACD;QACD,iBAAiB;QACjB,MAAM;IACR;IACA;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACR;SACD;QACD,iBAAiB;QACjB,MAAM;IACR;IACA;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACR;SACD;QACD,iBAAiB;QACjB,MAAM;IACR;IACA;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACR;SACD;QACD,iBAAiB;QACjB,MAAM;IACR;IACA;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACR;SACD;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACR;YACA;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACR;YACA;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACR;YACA;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACR;YACA;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACR;SACD;QACD,iBAAiB;QACjB,MAAM;IACR;IACA;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACR;YACA;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACR;YACA;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACR;YACA;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACR;YACA;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACR;SACD;QACD,iBAAiB;QACjB,MAAM;IACR;IACA;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACR;SACD;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACR;YACA;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACR;YACA;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACR;YACA;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACR;SACD;QACD,iBAAiB;QACjB,MAAM;IACR;IACA;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACR;SACD;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACR;SACD;QACD,iBAAiB;QACjB,MAAM;IACR;IACA;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACR;SACD;QACD,MAAM;QACN,SAAS,EAAE;QACX,iBAAiB;QACjB,MAAM;IACR;IACA;QACE,WAAW;QACX,QAAQ;YACN;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACR;YACA;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACR;YACA;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACR;SACD;QACD,MAAM;QACN,MAAM;IACR;IACA;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACR;SACD;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACR;SACD;QACD,iBAAiB;QACjB,MAAM;IACR;IACA;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACR;SACD;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACR;SACD;QACD,iBAAiB;QACjB,MAAM;IACR;IACA;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACR;SACD;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACR;SACD;QACD,iBAAiB;QACjB,MAAM;IACR;IACA;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACR;SACD;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACR;SACD;QACD,iBAAiB;QACjB,MAAM;IACR;IACA;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACR;SACD;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACR;SACD;QACD,iBAAiB;QACjB,MAAM;IACR;CACD"}},
    {"offset": {"line": 361, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 367, "column": 0}, "map": {"version":3,"sources":["file:///Users/veeno/Documents/WORK/Monshape/lost-discs/src/hooks/useNFTInteraction.tsx"],"sourcesContent":["\"use client\";\n\nimport { NFT_ABI, NFT_ADDRESS } from \"@/contract\";\nimport { useQueryClient } from \"@tanstack/react-query\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { readContract, waitForTransactionReceipt } from \"viem/actions\";\nimport { formatUnits, parseUnits } from \"viem/utils\";\nimport {\n  useAccount,\n  useConnect,\n  usePublicClient,\n  useReadContract,\n  useWaitForTransactionReceipt,\n  useWriteContract,\n} from \"wagmi\";\n\ninterface NFTMetadata {\n  tokenId: bigint;\n  metadataId: bigint;\n  name: string;\n  description: string;\n  image: string;\n  attributes: Array<{ trait_type: string; value: string }>;\n}\n\ninterface UserNFTDetailed {\n  tokenId: bigint;\n  metadataId: bigint;\n  tokenURI: string;\n  metadata?: NFTMetadata;\n  normalizedImage?: string;\n}\n\nexport function useNFT() {\n  const { address, isConnected } = useAccount();\n  const queryClient = useQueryClient();\n  const { connect, connectors } = useConnect();\n  const publicClient = usePublicClient();\n  const [lastMintedTokenId, setLastMintedTokenId] = useState<bigint | null>(\n    null\n  );\n  const isFirstMount = useRef(true);\n  const [mintPrice, setMintPrice] = useState<bigint>(BigInt(0));\n  const [userNFTs, setUserNFTs] = useState<UserNFTDetailed[]>([]);\n  const [nftMetadata, setNftMetadata] = useState<NFTMetadata[]>([]);\n  const [isLoadingNFTs, setIsLoadingNFTs] = useState(false);\n  const refreshIntervalRef = useRef<NodeJS.Timeout | null>(null);\n\n  const { data: maxSupply } = useReadContract({\n    address: NFT_ADDRESS,\n    abi: NFT_ABI,\n    functionName: \"MAX_SUPPLY\",\n  });\n\n  const { data: totalMinted } = useReadContract({\n    address: NFT_ADDRESS,\n    abi: NFT_ABI,\n    functionName: \"totalMinted\",\n  });\n\n  const { data: price } = useReadContract({\n    address: NFT_ADDRESS,\n    abi: NFT_ABI,\n    functionName: \"PRICE\",\n  });\n\n  const { data: remainingSupply } = useReadContract({\n    address: NFT_ADDRESS,\n    abi: NFT_ABI,\n    functionName: \"remainingSupply\",\n  });\n\n  const { data: isPaused } = useReadContract({\n    address: NFT_ADDRESS,\n    abi: NFT_ABI,\n    functionName: \"paused\",\n  });\n\n  const { data: userMintStatus } = useReadContract({\n    address: NFT_ADDRESS,\n    abi: NFT_ABI,\n    functionName: \"getUserMintStatus\",\n    args: address ? [address] : undefined,\n  });\n\n  const { data: mintPhaseInfo } = useReadContract({\n    address: NFT_ADDRESS,\n    abi: NFT_ABI,\n    functionName: \"getMintPhaseInfo\",\n  });\n\n  const { data: isUserWL } = useReadContract({\n    address: NFT_ADDRESS,\n    abi: NFT_ABI,\n    functionName: \"isWhitelisted\",\n    args: address ? [address] : undefined,\n  });\n\n  const { data: isUserOG } = useReadContract({\n    address: NFT_ADDRESS,\n    abi: NFT_ABI,\n    functionName: \"isOG\",\n    args: address ? [address] : undefined,\n  });\n\n  const { data: isUserFCFS } = useReadContract({\n    address: NFT_ADDRESS,\n    abi: NFT_ABI,\n    functionName: \"isFCFS\",\n    args: address ? [address] : undefined,\n  });\n\n  const { data: isUserTeam } = useReadContract({\n    address: NFT_ADDRESS,\n    abi: NFT_ABI,\n    functionName: \"isTeamMember\",\n    args: address ? [address] : undefined,\n  });\n\n  const { writeContract, data: hash, error } = useWriteContract();\n  const { isLoading: isMintLoading, isSuccess: isMintSuccess } =\n    useWaitForTransactionReceipt({ hash });\n\n  const createDefaultMetadata = (nft: UserNFTDetailed): NFTMetadata => {\n    return {\n      tokenId: nft.tokenId,\n      metadataId: nft.metadataId,\n      name: `LIL MONK #${nft.tokenId.toString()}`,\n      description: \"Metadata unavailable\",\n      image: \"/preview.gif\",\n      attributes: [],\n    };\n  };\n\n  const IPFS_GATEWAY = \"https://gateway.pinata.cloud/ipfs/\";\n\n  const fetchMetadataForNFTs = async (\n    nfts: UserNFTDetailed[]\n  ): Promise<NFTMetadata[]> => {\n    if (!nfts || nfts.length === 0) {\n      return [];\n    }\n\n    const fetchWithRetry = async (url: string, retries = 2) => {\n      let lastError;\n\n      for (let i = 0; i <= retries; i++) {\n        try {\n          const response = await fetch(url, { cache: \"no-store\" });\n\n          if (!response.ok) {\n            throw new Error(`HTTP error: ${response.status}`);\n          }\n\n          const contentType = response.headers.get(\"content-type\");\n          if (contentType && contentType.includes(\"application/json\")) {\n            return await response.json();\n          }\n\n          const text = await response.text();\n          try {\n            return JSON.parse(text);\n          } catch {\n            throw new Error(\"Response is not valid JSON\");\n          }\n        } catch (error) {\n          lastError = error;\n\n          if (i < retries) {\n            await new Promise((resolve) => setTimeout(resolve, 1000));\n          }\n        }\n      }\n\n      throw lastError || new Error(\"Failed to fetch after retries\");\n    };\n\n    const metadataPromises = nfts.map(async (nft) => {\n      try {\n        if (!nft.tokenURI) {\n          return createDefaultMetadata(nft);\n        }\n\n        let metadataUrl = nft.tokenURI;\n\n        if (metadataUrl.startsWith(\"ipfs://\")) {\n          metadataUrl = metadataUrl.replace(\"ipfs://\", IPFS_GATEWAY);\n        }\n\n        const data = await fetchWithRetry(metadataUrl);\n\n        if (!data || typeof data !== \"object\") {\n          throw new Error(\"Invalid metadata format\");\n        }\n\n        const imageUrl = data.image || \"/preview.gif\";\n\n        let normalizedImageUrl = imageUrl;\n        if (imageUrl.startsWith(\"ipfs://\")) {\n          normalizedImageUrl = imageUrl.replace(\"ipfs://\", IPFS_GATEWAY);\n        }\n\n        const metadata: NFTMetadata = {\n          tokenId: nft.tokenId,\n          metadataId: nft.metadataId,\n          name: data.name || `NFT #${nft.tokenId.toString()}`,\n          description: data.description || \"\",\n          image: normalizedImageUrl,\n          attributes: data.attributes || [],\n        };\n\n        setUserNFTs((currentNFTs) =>\n          currentNFTs.map((currentNft) => {\n            if (currentNft.tokenId === nft.tokenId) {\n              return {\n                ...currentNft,\n                metadata: metadata,\n                normalizedImage: normalizedImageUrl,\n              };\n            }\n            return currentNft;\n          })\n        );\n\n        return metadata;\n      } catch (error) {\n        console.error(\n          `Error fetching metadata for NFT #${nft.tokenId.toString()}:`,\n          error\n        );\n        return createDefaultMetadata(nft);\n      }\n    });\n\n    const results = await Promise.allSettled(metadataPromises);\n    const metadata = results\n      .filter(\n        (result): result is PromiseFulfilledResult<NFTMetadata> =>\n          result.status === \"fulfilled\"\n      )\n      .map((result) => result.value);\n\n    return metadata;\n  };\n\n  const refreshUserNFTs = async () => {\n    if (!address || !publicClient) {\n      return null;\n    }\n\n    if (isLoadingNFTs) {\n      return null;\n    }\n\n    setIsLoadingNFTs(true);\n\n    try {\n      (await readContract(publicClient, {\n        address: NFT_ADDRESS,\n        abi: NFT_ABI,\n        functionName: \"totalMinted\",\n      })) as bigint;\n\n      const result = await readContract(publicClient, {\n        address: NFT_ADDRESS,\n        abi: NFT_ABI,\n        functionName: \"getUserNFTsDetailed\",\n        args: [address],\n      });\n\n      if (!result || !Array.isArray(result) || result.length < 4) {\n        setUserNFTs([]);\n        setNftMetadata([]);\n        setIsLoadingNFTs(false);\n        return [];\n      }\n\n      const [userTokensArray, metadataArray, tokenURIsArray] = result;\n\n      const userTokens = userTokensArray as readonly bigint[];\n      const metadataIds = metadataArray as readonly bigint[];\n      const tokenURIs = tokenURIsArray as readonly string[];\n\n      if (!userTokens.length) {\n        setUserNFTs([]);\n        setNftMetadata([]);\n        setIsLoadingNFTs(false);\n        return [];\n      }\n\n      const nftDetails: UserNFTDetailed[] = Array.from(\n        { length: userTokens.length },\n        (_, i) => {\n          const tokenId = userTokens[i];\n          const existingNFT = userNFTs.find((nft) => nft.tokenId === tokenId);\n\n          return {\n            tokenId,\n            metadataId: metadataIds[i],\n            tokenURI: tokenURIs[i] || \"\",\n            metadata: existingNFT?.metadata,\n            normalizedImage: existingNFT?.normalizedImage || \"/preview.gif\",\n          };\n        }\n      );\n\n      setUserNFTs(nftDetails);\n\n      const nftsNeedingMetadata = nftDetails.filter((nft) => !nft.metadata);\n\n      if (nftsNeedingMetadata.length > 0) {\n        console.log(`Fetching metadata for ${nftsNeedingMetadata.length} NFTs`);\n\n        fetchMetadataForNFTs(nftsNeedingMetadata).then((newMetadata) => {\n          setNftMetadata((currentMetadata) => [\n            ...currentMetadata.filter(\n              (m) => !newMetadata.some((nm) => nm.tokenId === m.tokenId)\n            ),\n            ...newMetadata,\n          ]);\n        });\n      }\n\n      setIsLoadingNFTs(false);\n      return nftDetails;\n    } catch (error) {\n      console.error(\"Error while refreshing NFTs:\", error);\n      setIsLoadingNFTs(false);\n      return null;\n    }\n  };\n\n  const formatMON = (weiAmount: bigint | undefined): string => {\n    if (!weiAmount) return \"0\";\n    return formatUnits(weiAmount, 18);\n  };\n\n  const parseMON = (monAmount: string): bigint => {\n    try {\n      return parseUnits(monAmount, 18);\n    } catch (error) {\n      console.error(\"Error parsing MON amount:\", error);\n      return BigInt(0);\n    }\n  };\n\n  useEffect(() => {\n    getMintPrice();\n  }, [mintPhaseInfo]);\n\n  const getMintPrice = (): bigint => {\n    const currentPhase = formatMintPhaseInfo()?.currentPhase;\n\n    if (\n      typeof isUserTeam !== \"undefined\" &&\n      isUserTeam !== null &&\n      Boolean(isUserTeam)\n    ) {\n      return BigInt(0);\n    }\n\n    switch (currentPhase) {\n      case \"Team Only\": {\n        setMintPrice(BigInt(0));\n        return BigInt(0);\n      }\n      case \"Whitelist\": {\n        setMintPrice(BigInt(1 * 10 ** 18));\n        return BigInt(1 * 10 ** 18);\n      }\n      case \"First Come First Served\": {\n        setMintPrice(BigInt(3 * 10 ** 18));\n        return BigInt(3 * 10 ** 18);\n      }\n      case \"Public Mint\": {\n        setMintPrice(BigInt(50 * 10 ** 18));\n        return BigInt(50 * 10 ** 18);\n      }\n      default:\n        return BigInt(0);\n    }\n  };\n\n  const getFormattedPrice = (): string => {\n    const mintPrice = getMintPrice();\n    return formatMON(mintPrice);\n  };\n\n  const mint = async (isOG: boolean = false) => {\n    if (!isConnected) {\n      await connect({ connector: connectors[0] });\n      return null;\n    }\n\n    if (!publicClient) {\n      throw new Error(\"Client unavailable\");\n    }\n\n    const mintPrice = getMintPrice();\n\n    try {\n      const txHash = await writeContract({\n        address: NFT_ADDRESS,\n        abi: NFT_ABI,\n        functionName: \"mint\",\n        args: [isOG],\n        value: mintPrice,\n        account: address,\n        gas: BigInt(300000),\n      });\n\n      if (typeof txHash === \"string\") {\n        await waitForTransactionReceipt(publicClient, {\n          hash: txHash as `0x${string}`,\n          confirmations: 1,\n        });\n\n        invalidateQueries();\n\n        try {\n          const currentTotalMinted = (await readContract(publicClient, {\n            address: NFT_ADDRESS,\n            abi: NFT_ABI,\n            functionName: \"totalMinted\",\n          })) as bigint;\n\n          const newTokenId = currentTotalMinted - BigInt(1);\n          setLastMintedTokenId(newTokenId);\n        } catch (err) {\n          console.error(\"Error retrieving totalMinted:\", err);\n        }\n\n        return { success: true, hash: txHash };\n      } else {\n        throw new Error(\"Invalid transaction hash\");\n      }\n    } catch (error) {\n      console.error(\"Error during mint:\", error);\n      throw new Error(\"Transaction failed. Check parameters and try again.\");\n    }\n  };\n\n  const invalidateQueries = () => {\n    if (!queryClient) return;\n\n    const queries = [\n      \"totalMinted\",\n      \"MAX_SUPPLY\",\n      \"getUserMintStatus\",\n      \"remainingSupply\",\n      \"getMintPhaseInfo\",\n      \"getUserNFTsDetailed\",\n    ].map((functionName) => ({\n      queryKey: [\n        \"readContract\",\n        {\n          address: NFT_ADDRESS,\n          functionName,\n        },\n      ],\n    }));\n\n    queries.forEach((query) => queryClient.invalidateQueries(query));\n  };\n\n  useEffect(() => {\n    if (address && publicClient) {\n      if (isFirstMount.current) {\n        refreshUserNFTs();\n        isFirstMount.current = false;\n      }\n\n      refreshIntervalRef.current = setInterval(() => {\n        console.log(\"Rafraîchissement automatique des données\");\n        refreshUserNFTs();\n        invalidateQueries();\n      }, 10000);\n\n      return () => {\n        if (refreshIntervalRef.current) {\n          clearInterval(refreshIntervalRef.current);\n          refreshIntervalRef.current = null;\n        }\n      };\n    }\n  }, [address, publicClient]);\n\n  useEffect(() => {\n    if (isMintSuccess) {\n      if (refreshIntervalRef.current) {\n        clearInterval(refreshIntervalRef.current);\n        refreshIntervalRef.current = null;\n      }\n\n      invalidateQueries();\n\n      const refreshSequence = [\n        {\n          delay: 1000,\n          message: \"Premier rafraîchissement immédiat après le mint\",\n        },\n        {\n          delay: 3000,\n          message: \"Deuxième rafraîchissement pour vérifier les métadonnées\",\n        },\n        {\n          delay: 8000,\n          message: \"Troisième rafraîchissement pour confirmer tous les NFTs\",\n        },\n        {\n          delay: 15000,\n          message: \"Rafraîchissement final pour validation complète\",\n        },\n      ];\n\n      let totalDelay = 0;\n\n      refreshSequence.forEach((step, index) => {\n        totalDelay += step.delay;\n\n        setTimeout(async () => {\n          try {\n            console.log(\n              `${step.message} - Séquence ${index + 1}/${\n                refreshSequence.length\n              }`\n            );\n            await refreshUserNFTs();\n\n            if (\n              index === refreshSequence.length - 1 &&\n              address &&\n              publicClient\n            ) {\n              refreshIntervalRef.current = setInterval(() => {\n                console.log(\"Rafraîchissement automatique des données\");\n                refreshUserNFTs();\n                invalidateQueries();\n              }, 10000);\n            }\n          } catch (error) {\n            console.error(\n              `Erreur pendant le rafraîchissement #${index + 1}:`,\n              error\n            );\n          }\n        }, totalDelay);\n      });\n    }\n  }, [isMintSuccess, address, publicClient]);\n\n  const formatUserMintStatus = () => {\n    if (\n      !userMintStatus ||\n      !Array.isArray(userMintStatus) ||\n      userMintStatus.length < 5\n    ) {\n      return null;\n    }\n\n    return {\n      canCurrentlyMint: Boolean(userMintStatus[0]),\n      mintsDone: Number(userMintStatus[1]),\n      mintsAllowed: Number(userMintStatus[2]),\n      mintsRemaining: Number(userMintStatus[3]),\n      userStatus: String(userMintStatus[4]),\n    };\n  };\n\n  const formatMintPhaseInfo = () => {\n    if (\n      !mintPhaseInfo ||\n      !Array.isArray(mintPhaseInfo) ||\n      mintPhaseInfo.length < 5\n    ) {\n      return null;\n    }\n\n    return {\n      currentPhase: String(mintPhaseInfo[0]),\n      isActive: Boolean(mintPhaseInfo[1]),\n      totalSupply: Number(mintPhaseInfo[2]),\n      mintedCount: Number(mintPhaseInfo[3]),\n      remainingCount: Number(mintPhaseInfo[4]),\n    };\n  };\n\n  return {\n    maxSupply: Number(maxSupply ?? 0),\n    totalMinted: Number(totalMinted ?? 0),\n    price,\n    remainingSupply: Number(remainingSupply ?? 0),\n    isPaused: Boolean(isPaused),\n\n    mint,\n    isLoading: isMintLoading,\n    isSuccess: isMintSuccess,\n    error,\n    refreshUserNFTs,\n    lastMintedTokenId,\n    isLoadingNFTs,\n\n    getMintPrice,\n    getFormattedPrice,\n    formatMON,\n    parseMON,\n\n    isConnected,\n    userMintStatus: formatUserMintStatus(),\n    isUserWL: Boolean(isUserWL),\n    isUserOG: Boolean(isUserOG),\n    isUserFCFS: Boolean(isUserFCFS),\n    isUserTeam: Boolean(isUserTeam),\n\n    mintPhaseInfo: formatMintPhaseInfo(),\n\n    mintPrice,\n    nftMetadata,\n    userNFTs,\n  };\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 884, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 890, "column": 0}, "map": {"version":3,"sources":["file:///Users/veeno/Documents/WORK/Monshape/lost-discs/src/components/UserNFTs.tsx"],"sourcesContent":["\"use client\";\nimport { useNFT } from \"@/hooks/useNFTInteraction\";\nimport { useEffect, useRef } from \"react\";\nimport { useAccount } from \"wagmi\";\n\nexport function UserNFTs() {\n  const { refreshUserNFTs, userNFTs, isLoadingNFTs } = useNFT();\n  const { address } = useAccount();\n  const hasInitialized = useRef(false);\n\n  useEffect(() => {\n    if (address && !hasInitialized.current) {\n      console.log(\"Initial NFT loading\");\n      refreshUserNFTs().then(() => {\n        hasInitialized.current = true;\n      });\n    }\n  }, [address, refreshUserNFTs]);\n\n  if (!address) {\n    return (\n      <div className=\"mt-10\">\n        <h2 className=\"text-2xl sm:text-4xl text-white mb-4\">MY NFTS (0)</h2>\n        <div className=\"h-48 flex items-center justify-center\">\n          <p className=\"text-[rgba(255,255,255,1)] uppercase text-xl sm:text-3xl\">\n            Connect your wallet to see your NFTs\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"mt-0 sm:mt-8\">\n      <div className=\"flex justify-between items-center mb-2\">\n        <h2 className=\"text-lg sm:text-2xl text-white font-bold\">\n          MY NFTS ( {userNFTs.length || 0} )\n        </h2>\n        {/* <div className=\"flex items-center gap-3\">\n          <button\n            onClick={handleRefresh}\n            className={`${\n              isLoadingNFTs\n                ? \"bg-[rgba(255,255,255,0.1)] cursor-not-allowed\"\n                : \"bg-brandColor hover:bg-[#6C07D1]\"\n            } px-6 py-2 rounded text-base sm:text-xl flex uppercase transition-all duration-300 ease-in-out items-center gap-2`}\n            disabled={isLoadingNFTs}\n          >\n            {isLoadingNFTs && (\n              <div className=\"animate-spin mr-2 \">\n                <svg\n                  width={24}\n                  height={24}\n                  viewBox=\"0 0 24 24\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  className=\"animate-spin\"\n                  fill=\"none\"\n                >\n                  <circle\n                    className=\"opacity-25\"\n                    cx=\"12\"\n                    cy=\"12\"\n                    r=\"10\"\n                    stroke={\"currentColor\"}\n                    strokeWidth={2}\n                  />\n                  <path\n                    className=\"opacity-75\"\n                    fill={\"currentColor\"}\n                    d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n                  />\n                </svg>\n              </div>\n            )}\n            Refresh\n          </button>\n        </div> */}\n      </div>\n\n      {userNFTs && userNFTs.length > 0 ? (\n        <div className=\"flex overflow-x-auto gap-3 scrollbar-hide\">\n          {userNFTs.map((nft) => {\n            const tokenId = nft.tokenId.toString();\n            const nftName = nft.metadata?.name || `NFT #${tokenId}`;\n            return (\n              <div\n                key={`nft-${tokenId}`}\n                className=\"relative transition-all duration-500 min-w-[145px] pb-3 rounded-[9px] scrollbar-hide\"\n              >\n                <div className=\"bg-[rgba(255,255,255,0.37)] backdrop-blur-md rounded-[9px] overflow-hidden p-1\">\n                  <div className=\"relative w-full h-auto\">\n                    {nft.normalizedImage &&\n                    (nft.normalizedImage.endsWith(\".mp4\") ||\n                      nft.normalizedImage.endsWith(\".wav\") ||\n                      nft.normalizedImage.endsWith(\".webm\")) ? (\n                      <video\n                        src={nft.normalizedImage}\n                        controls\n                        className=\"w-full h-[134px] sm:h-[134px] object-cover rounded-lg\"\n                        loop\n                        muted\n                      />\n                    ) : (\n                      <img\n                        src={nft.normalizedImage || \"\"}\n                        alt={nftName}\n                        width={400}\n                        height={262}\n                        className=\" h-[134px] sm:h-[134px] w-full object-cover rounded-lg\"\n                      />\n                    )}\n                  </div>\n                  <div className=\"px-2 sm:px-2 py-1 pb-0.5\">\n                    <h3\n                      className=\"text-white text-sm sm:text-[15px] font-bold\"\n                      style={{\n                        fontWeight: \"900\",\n                      }}\n                    >\n                      {nftName}\n                    </h3>\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      ) : (\n        <div className=\"h-[100px] sm:h-48 flex items-center justify-center\">\n          {isLoadingNFTs ? (\n            <div className=\"flex flex-col items-center\">\n              <div className=\"animate-spin w-8 h-8 border-4 border-[#ffffff] border-t-transparent rounded-full\"></div>\n            </div>\n          ) : (\n            <p className=\"text-white text-sm sm:text-xl\">No NFTs found.</p>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AACA;AACA;AACA;AAHA;;;;;AAKO,SAAS;IACd,MAAM,EAAE,eAAe,EAAE,QAAQ,EAAE,aAAa,EAAE,GAAG,CAAA,GAAA,kIAAA,CAAA,SAAM,AAAD;IAC1D,MAAM,EAAE,OAAO,EAAE,GAAG,CAAA,GAAA,2JAAA,CAAA,aAAU,AAAD;IAC7B,MAAM,iBAAiB,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAE;IAE9B,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,IAAI,WAAW,CAAC,eAAe,OAAO,EAAE;YACtC,QAAQ,GAAG,CAAC;YACZ,kBAAkB,IAAI,CAAC;gBACrB,eAAe,OAAO,GAAG;YAC3B;QACF;IACF,GAAG;QAAC;QAAS;KAAgB;IAE7B,IAAI,CAAC,SAAS;QACZ,qBACE,8OAAC;YAAI,WAAU;;8BACb,8OAAC;oBAAG,WAAU;8BAAuC;;;;;;8BACrD,8OAAC;oBAAI,WAAU;8BACb,cAAA,8OAAC;wBAAE,WAAU;kCAA2D;;;;;;;;;;;;;;;;;IAMhF;IAEA,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAI,WAAU;0BACb,cAAA,8OAAC;oBAAG,WAAU;;wBAA2C;wBAC5C,SAAS,MAAM,IAAI;wBAAE;;;;;;;;;;;;YA2CnC,YAAY,SAAS,MAAM,GAAG,kBAC7B,8OAAC;gBAAI,WAAU;0BACZ,SAAS,GAAG,CAAC,CAAC;oBACb,MAAM,UAAU,IAAI,OAAO,CAAC,QAAQ;oBACpC,MAAM,UAAU,IAAI,QAAQ,EAAE,QAAQ,CAAC,KAAK,EAAE,SAAS;oBACvD,qBACE,8OAAC;wBAEC,WAAU;kCAEV,cAAA,8OAAC;4BAAI,WAAU;;8CACb,8OAAC;oCAAI,WAAU;8CACZ,IAAI,eAAe,IACpB,CAAC,IAAI,eAAe,CAAC,QAAQ,CAAC,WAC5B,IAAI,eAAe,CAAC,QAAQ,CAAC,WAC7B,IAAI,eAAe,CAAC,QAAQ,CAAC,QAAQ,kBACrC,8OAAC;wCACC,KAAK,IAAI,eAAe;wCACxB,QAAQ;wCACR,WAAU;wCACV,IAAI;wCACJ,KAAK;;;;;6DAGP,8OAAC;wCACC,KAAK,IAAI,eAAe,IAAI;wCAC5B,KAAK;wCACL,OAAO;wCACP,QAAQ;wCACR,WAAU;;;;;;;;;;;8CAIhB,8OAAC;oCAAI,WAAU;8CACb,cAAA,8OAAC;wCACC,WAAU;wCACV,OAAO;4CACL,YAAY;wCACd;kDAEC;;;;;;;;;;;;;;;;;uBAjCF,CAAC,IAAI,EAAE,SAAS;;;;;gBAuC3B;;;;;qCAGF,8OAAC;gBAAI,WAAU;0BACZ,8BACC,8OAAC;oBAAI,WAAU;8BACb,cAAA,8OAAC;wBAAI,WAAU;;;;;;;;;;yCAGjB,8OAAC;oBAAE,WAAU;8BAAgC;;;;;;;;;;;;;;;;;AAMzD"}},
    {"offset": {"line": 1080, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1086, "column": 0}, "map": {"version":3,"sources":["file:///Users/veeno/Documents/WORK/Monshape/lost-discs/src/feature/home/index.tsx"],"sourcesContent":["\"use client\";\nimport { Button } from \"@/components/button\";\nimport { WalletModal } from \"@/components/connect-modal\";\nimport { UserNFTs } from \"@/components/UserNFTs\";\nimport { useNFT } from \"@/hooks/useNFTInteraction\";\nimport { motion } from \"framer-motion\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { useAccount, useSwitchChain } from \"wagmi\";\n\nconst BackgroundWrapper = () => {\n  return (\n    <div className=\"fixed top-0 left-0 w-full h-full z-0 overflow-hidden\">\n      <div className=\"h-[60px] md:h-[115px] flex items-center justify-center z-[1000] absolute top-[20px] md:top-[80px] left-[20px] md:left-[80px]\">\n        <img\n          src=\"/icon/Logo_SVG.svg\"\n          alt=\"Logo\"\n          className=\"w-full h-full object-cover\"\n        />\n      </div>\n      <video\n        autoPlay\n        loop\n        muted\n        playsInline\n        className=\"absolute top-0 left-0 w-full h-full object-cover hidden lg:block\"\n      >\n        <source src=\"/background/lost_disc.mp4\" type=\"video/mp4\" />\n      </video>\n      <video\n        autoPlay\n        loop\n        muted\n        playsInline\n        className=\"absolute top-0 left-0 w-full h-full object-cover block lg:hidden\"\n      >\n        <source src=\"/background/lost_disc_mobile.mp4\" type=\"video/mp4\" />\n      </video>\n      <motion.div\n        className=\"absolute bottom-0 left-0 \"\n        initial={{ y: \"10%\", scale: 1.4, x: \"-10%\", opacity: 1 }}\n        animate={{ y: 0, scale: 1, opacity: 1, x: \"-10%\" }}\n        transition={{\n          duration: 1.4,\n        }}\n      >\n        <img\n          src=\"/background/left.png\"\n          alt=\"Left layer\"\n          className=\"w-full h-full object-cover\"\n        />\n      </motion.div>\n      <motion.div\n        className=\"absolute bottom-0 right-0\"\n        initial={{ y: \"10%\", scale: 1.4, x: \"10%\", opacity: 1 }}\n        animate={{ y: 0, scale: 1.1, opacity: 1, x: \"10%\" }}\n        transition={{\n          duration: 1.4,\n        }}\n      >\n        <img\n          src=\"/background/right.png\"\n          alt=\"Right layer\"\n          className=\"w-full h-full object-cover\"\n        />\n      </motion.div>\n    </div>\n  );\n};\n\nconst AudioPlayer = () => {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentTrack, setCurrentTrack] = useState(0);\n  const audioRef = useRef<HTMLAudioElement>(null);\n\n  const tracks = [\"/music/unlocked_fate.wav\", \"/music/we_are_monshape.wav\"];\n\n  // Tentative de lecture automatique au chargement\n  useEffect(() => {\n    const attemptAutoplay = async () => {\n      if (audioRef.current) {\n        try {\n          await audioRef.current.play();\n          setIsPlaying(true);\n        } catch (error: unknown) {\n          console.log(\n            \"Lecture automatique impossible - interaction utilisateur requise\"\n          );\n          setIsPlaying(false);\n        }\n      }\n    };\n\n    attemptAutoplay();\n  }, []);\n\n  const playNext = () => {\n    const nextTrack = (currentTrack + 1) % tracks.length;\n    setCurrentTrack(nextTrack);\n    if (audioRef.current) {\n      audioRef.current.src = tracks[nextTrack];\n      if (isPlaying) {\n        audioRef.current.play().catch((error) => {\n          console.error(\"Erreur lors de la lecture:\", error);\n        });\n      }\n    }\n  };\n\n  const playPrevious = () => {\n    const prevTrack = (currentTrack - 1 + tracks.length) % tracks.length;\n    setCurrentTrack(prevTrack);\n    if (audioRef.current) {\n      audioRef.current.src = tracks[prevTrack];\n      if (isPlaying) {\n        audioRef.current.play().catch((error) => {\n          console.error(\"Erreur lors de la lecture:\", error);\n        });\n      }\n    }\n  };\n\n  const togglePlay = () => {\n    if (audioRef.current) {\n      if (isPlaying) {\n        audioRef.current.pause();\n      } else {\n        audioRef.current.play().catch((error) => {\n          console.error(\"Erreur lors de la lecture:\", error);\n        });\n      }\n      setIsPlaying(!isPlaying);\n    }\n  };\n\n  useEffect(() => {\n    const audio = audioRef.current;\n    if (!audio) return;\n\n    const handleEnded = () => {\n      playNext();\n    };\n\n    audio.addEventListener(\"ended\", handleEnded);\n    return () => {\n      audio.removeEventListener(\"ended\", handleEnded);\n    };\n  }, [currentTrack]);\n\n  return (\n    <div className=\"fixed min-w-[200px] sm:min-w-[342px] w-fit sm:bottom-[60px] bottom-[20px] bg-white/10 border rounded-xl border-white/30 h-[50px] sm:h-[57px] left-[20px] sm:left-[90px] lg:left-[100px] z-50 backdrop-blur-sm sm:block hidden\">\n      <div className=\"relative sm:pl-[95px] pl-[60px] flex items-center justify-between gap-2 p-2 \">\n        <img\n          src=\"/background/music_player.gif\"\n          alt=\"Music\"\n          className=\"w-[60px] sm:w-[126px] h-[80px] sm:h-[173px] absolute bottom-1/2  translate-y-1/2 sm:translate-y-1/2 translate-x-1/4 sm:-left-[115px] -left-[30px] z-50\"\n        />\n        <audio ref={audioRef} src={tracks[currentTrack]} />\n        <div className=\"flex flex-col justify-center -mt-[5px] sm:-mt-[3px]\">\n          <p\n            className=\"text-white text-[12px] sm:text-base uppercase \"\n            style={{\n              fontWeight: \"800\",\n            }}\n          >\n            {\" \"}\n            {currentTrack ? \"We Are Monshape\" : \"Unlocked Fate\"}\n          </p>\n          <p className=\"text-white/50 text-[9px]\">Monshape.club</p>\n        </div>\n        <div className=\"flex items-center ml-auto sm:ml-10\">\n          <button\n            onClick={playPrevious}\n            className=\"w-10 h-10 flex items-center justify-center rounded-full hover:bg-opacity-80 sm:mt-0 -mt-1 transition-all\"\n          >\n            <img\n              src=\"/icon/Playlist_Previous.svg\"\n              alt=\"Previous\"\n              className=\"w-4 h-4\"\n            />\n          </button>{\" \"}\n          <button\n            onClick={togglePlay}\n            className=\" flex items-center justify-center rounded-full hover:bg-opacity-80 transition-all sm:mt-0 -mt-1\"\n          >\n            {isPlaying ? (\n              <img\n                src=\"/icon/Playlist_Pause.svg\"\n                alt=\"Pause\"\n                className=\"w-4 h-5\"\n              />\n            ) : (\n              <img\n                src=\"/icon/Playlist_Play.svg\"\n                alt=\"Play\"\n                className=\"w-4 h-5 rotate-180\"\n              />\n            )}\n          </button>\n          <button\n            onClick={playNext}\n            className=\"w-10 h-10 flex items-center justify-center rounded-full hover:bg-opacity-80 transition-all sm:mt-0 -mt-1\"\n          >\n            <img src=\"/icon/Playlist_Next.svg\" alt=\"Next\" className=\"w-4 h-4\" />\n          </button>{\" \"}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport function NFT() {\n  const { address, chainId, isDisconnected } = useAccount();\n  const { switchChainAsync } = useSwitchChain();\n  const isWrongNetwork = chainId !== 10143;\n  const [open, setOpen] = useState(false);\n  const [mintingStep, setMintingStep] = useState<\n    \"idle\" | \"preparing\" | \"confirming\" | \"success\" | \"error\"\n  >(\"idle\");\n  const [, setLastMintedNFT] = useState<{\n    id: string;\n    image: string;\n  } | null>(null);\n  const loadingTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const successTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n\n  const {\n    maxSupply,\n    totalMinted,\n    isPaused,\n    mint,\n    isSuccess: isMintSuccess,\n    userMintStatus,\n    mintPhaseInfo,\n    refreshUserNFTs,\n    lastMintedTokenId,\n    isUserWL,\n    isUserFCFS,\n    isUserTeam,\n  } = useNFT();\n\n  const canCurrentlyMint = userMintStatus?.canCurrentlyMint;\n  const userMints = userMintStatus?.mintsDone || 0;\n  const maxMintsPerAddress = userMintStatus?.mintsAllowed || 1;\n  const userStatusInfo = userMintStatus?.userStatus || \"\";\n  const isWhitelisted =\n    userStatusInfo.includes(\"WHITELIST\") || userStatusInfo.includes(\"OG\");\n  const whitelistOnly =\n    mintPhaseInfo?.currentPhase === \"WHITELIST\" ||\n    mintPhaseInfo?.currentPhase === \"OG_SALE\";\n\n  const handleSwitchNetwork = async () => {\n    try {\n      await switchChainAsync({ chainId: 10143 });\n    } catch (error) {\n      console.error(\"Network switching error:\", error);\n    }\n  };\n\n  const handleMint = async () => {\n    try {\n      setMintingStep(\"preparing\");\n\n      if (chainId !== 10143) {\n        await handleSwitchNetwork();\n        return;\n      }\n\n      const result = await mint(false);\n      setMintingStep(\"confirming\");\n\n      if (result && result.success) {\n        setMintingStep(\"success\");\n\n        if (successTimeoutRef.current) {\n          clearTimeout(successTimeoutRef.current);\n        }\n\n        successTimeoutRef.current = setTimeout(() => {\n          setMintingStep(\"idle\");\n          successTimeoutRef.current = null;\n        }, 3000);\n\n        setTimeout(() => {\n          if (lastMintedTokenId) {\n            setLastMintedNFT({\n              id: String(lastMintedTokenId),\n              image: \"/placeholder-nft.png\",\n            });\n          } else {\n            checkForNFTMetadata();\n          }\n\n          if (successTimeoutRef.current) {\n            clearTimeout(successTimeoutRef.current);\n            successTimeoutRef.current = null;\n          }\n        }, 1000);\n      }\n    } catch (error) {\n      console.error(\"Mint error:\", error);\n    }\n  };\n\n  const [attempts, setAttempts] = useState(0);\n  const MAX_ATTEMPTS = 2;\n\n  const checkForNFTMetadata = async () => {\n    if (attempts >= MAX_ATTEMPTS) {\n      if (lastMintedTokenId) {\n        setLastMintedNFT({\n          id: String(lastMintedTokenId),\n          image: \"/placeholder-nft.png\",\n        });\n      } else if (totalMinted) {\n        const tokenId = Number(totalMinted) - 1;\n        setLastMintedNFT({\n          id: String(tokenId),\n          image: \"/placeholder-nft.png\",\n        });\n      }\n      return;\n    }\n\n    setAttempts((prev) => prev + 1);\n\n    try {\n      await refreshUserNFTs();\n\n      if (lastMintedTokenId) {\n        setLastMintedNFT({\n          id: String(lastMintedTokenId),\n          image: \"/placeholder-nft.png\",\n        });\n        return;\n      }\n\n      if (totalMinted) {\n        const tokenId = Number(totalMinted) - 1;\n        setLastMintedNFT({\n          id: String(tokenId),\n          image: \"/placeholder-nft.png\",\n        });\n      } else {\n        setLastMintedNFT({\n          id: \"?\",\n          image: \"/placeholder-nft.png\",\n        });\n      }\n    } catch (error) {\n      console.error(\"Error checking NFT metadata:\", error);\n      setLastMintedNFT({\n        id: lastMintedTokenId ? String(lastMintedTokenId) : \"?\",\n        image: \"/placeholder-nft.png\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (isMintSuccess) {\n      setMintingStep(\"success\");\n\n      if (successTimeoutRef.current) {\n        clearTimeout(successTimeoutRef.current);\n      }\n\n      successTimeoutRef.current = setTimeout(() => {\n        setMintingStep(\"idle\");\n        successTimeoutRef.current = null;\n      }, 3000);\n    }\n  }, [isMintSuccess]);\n\n  useEffect(() => {\n    return () => {\n      if (loadingTimeoutRef.current) {\n        clearTimeout(loadingTimeoutRef.current);\n      }\n\n      if (successTimeoutRef.current) {\n        clearTimeout(successTimeoutRef.current);\n      }\n    };\n  }, []);\n\n  const isSoldOut = totalMinted >= maxSupply;\n  const userCanMint =\n    canCurrentlyMint && !isPaused && (!whitelistOnly || isWhitelisted);\n\n  useEffect(() => {\n    const hasSeenPopup = localStorage.getItem(\"hasSeenCollectionInfoPopup\");\n    if (hasSeenPopup) {\n    }\n  }, []);\n\n  return (\n    <>\n      <main className=\"min-h-screen font-montserrat w-screen text-white flex flex-col sm:pt-0 transition-all duration-1000 ease-in-out relative justify-center\">\n        <BackgroundWrapper />\n        <div className=\"relative z-10 mt-[260px] sm:mt-[350px] lg:-mt-[150px]\">\n          <div className=\"max-w-[1450px] w-[90%] mx-auto mt-[40px] lg:mt-[220px] flex lg:flex-row flex-col  lg:justify-between\">\n            <div className=\"max-w-[436px] -ml-[60px] flex-col lg:items-start items-center text-white font-medium text-xl hidden lg:flex\">\n              <div className=\"w-full p-5 sm:p-9 rounded-xl bg-[#ffffff13] border border-[rgba(255,255,255,0.37)] relative\">\n                <h1\n                  className=\"uppercase text-white text-3xl mb-1\"\n                  style={{\n                    fontWeight: \"900\",\n                  }}\n                >\n                  300 Lost discs.\n                </h1>\n                <p\n                  className=\"text-white/90 text-base text-center sm:text-left sm:text-lg font-light\"\n                  style={{\n                    fontWeight: \"300\",\n                  }}\n                >\n                  4 energy codes. One path to unlock the legend. Each disc holds\n                  a fragment of the Legendary Code - echoing Astraea&apos;\n                  memory, resonating with NADS, pulsing through the Monad\n                  ecosystem, and sparking ancient legacy. Mint now to receive\n                  one of four mysterious traits, each unlocking real benefits\n                  from Monshape or its ecosystem partners.\n                </p>\n              </div>\n            </div>\n            {/* MINT BUTTON */}\n            <div className=\"max-w-[466px] w-full lg:mx-0 mx-auto\">\n              <div className=\"w-full flex flex-col items-center justify-center\">\n                {address && isWrongNetwork ? (\n                  <Button\n                    style={{\n                      fontWeight: \"800\",\n                      background:\n                        \"linear-gradient(90deg, #49FFFF 0%, #9900FF 100%)\",\n                      boxShadow: \"0px 0px 7.1px 1px #5F2AFF\",\n                    }}\n                    onClick={handleSwitchNetwork}\n                  >\n                    Switch Network\n                  </Button>\n                ) : null}\n\n                {!address && (\n                  <WalletModal open={open} setOpen={setOpen}>\n                    <Button\n                      style={{\n                        fontWeight: \"800\",\n                        background:\n                          \"linear-gradient(90deg, #49FFFF 0%, #9900FF 100%)\",\n                        boxShadow: \"0px 0px 7.1px 1px #5F2AFF\",\n                      }}\n                      onClick={() => setOpen(true)}\n                    >\n                      Connect Wallet\n                    </Button>\n                  </WalletModal>\n                )}\n\n                {address && !isWrongNetwork && (\n                  <div className=\"flex items-center flex-col lg:flex-row gap-3 w-full mb-0 uppercase\">\n                    {isSoldOut ? (\n                      <Button\n                        style={{\n                          fontWeight: \"800\",\n                        }}\n                      >\n                        Sold out!\n                      </Button>\n                    ) : userCanMint ? (\n                      <div className=\"flex items-center gap-5 w-full justify-center\">\n                        <Button\n                          style={{\n                            fontWeight: \"800\",\n                            background:\n                              \"linear-gradient(90deg, #49FFFF 0%, #9900FF 100%)\",\n                            boxShadow: \"0px 0px 7.1px 1px #5F2AFF\",\n                          }}\n                          className={`\n                          ${\n                            mintingStep === \"idle\" ||\n                            mintingStep === \"preparing\" ||\n                            mintingStep === \"confirming\"\n                              ? \"bg-[#A314B4] hover:bg-opacity-80\"\n                              : mintingStep === \"success\"\n                              ? \"bg-[#241F6F]\"\n                              : \"bg-[#858585] cursor-not-allowed\"\n                          } \n                        `}\n                          onClick={handleMint}\n                          disabled={\n                            mintingStep !== \"idle\" && mintingStep !== \"error\"\n                          }\n                        >\n                          {mintingStep === \"preparing\" && (\n                            <div className=\"flex items-center gap-2\">\n                              Preparing...\n                            </div>\n                          )}\n                          {mintingStep === \"confirming\" && (\n                            <div className=\"flex items-center gap-2\">\n                              Confirmation...\n                            </div>\n                          )}\n                          {mintingStep === \"success\" && (\n                            <div className=\"flex items-center gap-2\">\n                              Success\n                            </div>\n                          )}\n                          {mintingStep === \"idle\" && (\n                            <>\n                              <div className=\"w-full\">MINT</div>\n                            </>\n                          )}\n                        </Button>\n                      </div>\n                    ) : !userCanMint ? (\n                      <Button\n                        style={{\n                          fontWeight: \"800\",\n                        }}\n                      >\n                        NOT ELIGIBLE\n                      </Button>\n                    ) : (\n                      <Button\n                        style={{\n                          fontWeight: \"800\",\n                        }}\n                      >\n                        MINTED\n                      </Button>\n                    )}\n                  </div>\n                )}\n\n                {/* USER STATUS */}\n                {/* <div className=\"flex justify-between items-center mb-3\">\n                  <div\n                    className={`pb-1 rounded-full flex items-center text-base sm:text-xl`}\n                  >\n                    <div\n                      className={`${\n                        isUserWL || isUserFCFS || isUserTeam\n                          ? \"bg-green-600\"\n                          : \"bg-red-600\"\n                      } h-4 w-4 mr-3 `}\n                    />\n\n                    {isDisconnected\n                      ? \"NOT CONNECTED\"\n                      : isUserTeam\n                      ? \"ELIGIBLE TEAM\"\n                      : isUserWL\n                      ? \"ELIGIBLE WL\"\n                      : isUserFCFS\n                      ? \"ELIGIBLE FCFS\"\n                      : \"NOT ELIGIBLE\"}\n                  </div>\n                  {address && (\n                    <div className=\"text-center\">\n                      <span className=\"text-base sm:text-xl text-gray-300 uppercase\">\n                        mints:\n                      </span>\n                      <span className=\"ml-2 text-base sm:text-xl text-white font-medium\">\n                        {userMints}/{maxMintsPerAddress}\n                      </span>\n                    </div>\n                  )}\n                </div> */}\n\n                <div className=\"mt-4 sm:mt-6 w-full\">\n                  <div\n                    className=\"w-full h-4 rounded-full overflow-hidden border border-white/30\"\n                    style={{\n                      boxShadow: \"0px 0px 7.1px 1px #5F2AFF\",\n                      background: \"rgba(255, 255, 255, 0.1)\",\n                    }}\n                  >\n                    <div\n                      className=\"h-full transition-all duration-500\"\n                      style={{\n                        width: `${(totalMinted / (maxSupply || 1000)) * 100}%`,\n                        background:\n                          \"linear-gradient(90deg, #49FFFF 0%, #9900FF 100%)\",\n                      }}\n                    ></div>\n                  </div>\n                  <div\n                    className=\"flex justify-between items-center mt-4\"\n                    style={{\n                      fontWeight: \"600\",\n                    }}\n                  >\n                    <span className=\"text-base sm:text-xl text-gray-200 uppercase\">\n                      Total minted\n                    </span>\n                    <span className=\"text-base sm:text-xl font-medium text-white\">\n                      {totalMinted || 0} / {maxSupply || 377}\n                    </span>\n                  </div>\n                  <div className=\"h-[1px] w-full bg-white/50 my-2 sm:my-4\" />\n                  <div className=\"flex items-center justify-between\">\n                    <p\n                      className=\"text-white font-medium text-base sm:text-xl sm:text-[20px] mb-4 uppercase\"\n                      style={{\n                        background:\n                          \"linear-gradient(90deg, #49FFFF 0%, #9900FF 100%)\",\n                        WebkitBackgroundClip: \"text\",\n                        WebkitTextFillColor: \"transparent\",\n                        fontWeight: \"700\",\n                      }}\n                    >\n                      Current phase:{\" \"}\n                      <span className=\"\">\n                        {mintPhaseInfo?.currentPhase ===\n                        \"First Come First Served\"\n                          ? \"FCFS\"\n                          : mintPhaseInfo?.currentPhase === \"Team Only\"\n                          ? \"TEAM\"\n                          : mintPhaseInfo?.currentPhase === \"Whitelist\"\n                          ? \"WHITELIST\"\n                          : \"ENDED\"}\n                      </span>\n                    </p>\n                    {/* <p className=\"text-white font-bold text-lg sm:text-[22px] uppercase\">\n                        {!isSoldOut && (\n                          <CountdownTimer\n                            currentPhase={mintPhaseInfo?.currentPhase}\n                          />\n                        )}\n                      </p> */}\n                  </div>\n                </div>\n              </div>\n              <UserNFTs />{\" \"}\n            </div>\n          </div>\n        </div>\n      </main>\n      <footer className=\"fixed bottom-[20px] sm:bottom-[50px] right-[20px] sm:right-[60px] gap-4 z-50 flex\">\n        <a\n          href=\"https://monshape.club\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <img\n            src=\"/icon/Footer_monshapeLogo.svg\"\n            alt=\"Monshape\"\n            className=\"h-[25px] w-[25px] hover:scale-110 transition-all duration-300\"\n          />\n        </a>\n        <a\n          href=\"https://discord.gg/monshape\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <img\n            src=\"/icon/Footer_DiscordLogo.svg\"\n            alt=\"Discord\"\n            className=\"h-[25px] w-[25px] hover:opacity-80 transition-opacity\"\n          />\n        </a>\n        <a\n          href=\"https://x.com/Monshape\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <img\n            src=\"/icon/Footer_XLogo.svg\"\n            alt=\"Twitter\"\n            className=\"h-[25px] w-[25px] hover:opacity-80 transition-opacity\"\n          />\n        </a>\n        <a\n          href=\"https://monshapes-documents.gitbook.io/docs\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <img\n            src=\"/icon/Footer_Gitbookicon.svg\"\n            alt=\"Gitbook\"\n            className=\"h-[25px] w-[25px] hover:opacity-80 transition-opacity\"\n          />\n        </a>\n      </footer>\n      <AudioPlayer />\n    </>\n  );\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1993, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}